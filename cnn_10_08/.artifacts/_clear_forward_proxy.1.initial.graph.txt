 %0 = _x                                                                                                               # EncryptedTensor<uint8, shape=(1, 3, 64, 64)>
 %1 = [[[[  83   ... 2  127]]]]                                                                                        # ClearTensor<int8, shape=(8, 3, 3, 3)>                          @ /conv1/Conv.conv
 %2 = conv2d(%0, %1, [0 0 0 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)                  # EncryptedTensor<uint8, shape=(1, 8, 62, 62)>                   @ /conv1/Conv.conv
 %3 = round_bit_pattern(%2, lsbs_to_remove=15, overflow_protection=False, exactness=Exactness.EXACT)                   # EncryptedTensor<uint8, shape=(1, 8, 62, 62)>                   @ /conv1/Conv.conv_rounding
 %4 = astype(%3, dtype=float64)                                                                                        # EncryptedTensor<float64, shape=(1, 8, 62, 62)>
 %5 = 0                                                                                                                # ClearScalar<uint1>
 %6 = add(%4, %5)                                                                                                      # EncryptedTensor<float64, shape=(1, 8, 62, 62)>
 %7 = [[[[0]]  [ ... ]  [[0]]]]                                                                                        # ClearTensor<uint1, shape=(1, 8, 1, 1)>
 %8 = subtract(%6, %7)                                                                                                 # EncryptedTensor<float64, shape=(1, 8, 62, 62)>
 %9 = 6.712632472327617e-06                                                                                            # ClearScalar<float64>
%10 = multiply(%9, %8)                                                                                                 # EncryptedTensor<float64, shape=(1, 8, 62, 62)>
%11 = [[[[ 0.013 ... 783301]]]]                                                                                        # ClearTensor<float32, shape=(1, 8, 1, 1)>
%12 = add(%10, %11)                                                                                                    # EncryptedTensor<float64, shape=(1, 8, 62, 62)>
%13 = 0                                                                                                                # ClearScalar<uint1>
%14 = maximum(%12, %13)                                                                                                # EncryptedTensor<float64, shape=(1, 8, 62, 62)>
%15 = 0.0028954894191554124                                                                                            # ClearScalar<float64>
%16 = divide(%14, %15)                                                                                                 # EncryptedTensor<float64, shape=(1, 8, 62, 62)>
%17 = 0                                                                                                                # ClearScalar<uint1>
%18 = add(%16, %17)                                                                                                    # EncryptedTensor<float64, shape=(1, 8, 62, 62)>
%19 = rint(%18)                                                                                                        # EncryptedTensor<float64, shape=(1, 8, 62, 62)>
%20 = 0                                                                                                                # ClearScalar<uint1>
%21 = 255                                                                                                              # ClearScalar<uint8>
%22 = clip(%19, %20, %21)                                                                                              # EncryptedTensor<float64, shape=(1, 8, 62, 62)>
%23 = astype(%22, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 8, 62, 62)>
%24 = [[[[-109   ... 6   40]]]]                                                                                        # ClearTensor<int8, shape=(16, 8, 3, 3)>                         @ /conv2/Conv.conv
%25 = conv2d(%23, %24, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 16, 30, 30)>                  @ /conv2/Conv.conv
%26 = round_bit_pattern(%25, lsbs_to_remove=15, overflow_protection=False, exactness=Exactness.EXACT)                  # EncryptedTensor<uint1, shape=(1, 16, 30, 30)>                  @ /conv2/Conv.conv_rounding
%27 = astype(%26, dtype=float64)                                                                                       # EncryptedTensor<float64, shape=(1, 16, 30, 30)>
%28 = 0                                                                                                                # ClearScalar<uint1>
%29 = add(%27, %28)                                                                                                    # EncryptedTensor<float64, shape=(1, 16, 30, 30)>
%30 = [[[[0]]  [ ... ]  [[0]]]]                                                                                        # ClearTensor<uint1, shape=(1, 16, 1, 1)>
%31 = subtract(%29, %30)                                                                                               # EncryptedTensor<float64, shape=(1, 16, 30, 30)>
%32 = 3.371318214032969e-06                                                                                            # ClearScalar<float64>
%33 = multiply(%32, %31)                                                                                               # EncryptedTensor<float64, shape=(1, 16, 30, 30)>
%34 = [[[[ 0.132 ... 171302]]]]                                                                                        # ClearTensor<float32, shape=(1, 16, 1, 1)>
%35 = add(%33, %34)                                                                                                    # EncryptedTensor<float64, shape=(1, 16, 30, 30)>
%36 = 0                                                                                                                # ClearScalar<uint1>
%37 = maximum(%35, %36)                                                                                                # EncryptedTensor<float64, shape=(1, 16, 30, 30)>
%38 = 0.001987011617523499                                                                                             # ClearScalar<float64>
%39 = divide(%37, %38)                                                                                                 # EncryptedTensor<float64, shape=(1, 16, 30, 30)>
%40 = 0                                                                                                                # ClearScalar<uint1>
%41 = add(%39, %40)                                                                                                    # EncryptedTensor<float64, shape=(1, 16, 30, 30)>
%42 = rint(%41)                                                                                                        # EncryptedTensor<float64, shape=(1, 16, 30, 30)>
%43 = 0                                                                                                                # ClearScalar<uint1>
%44 = 255                                                                                                              # ClearScalar<uint8>
%45 = clip(%42, %43, %44)                                                                                              # EncryptedTensor<float64, shape=(1, 16, 30, 30)>
%46 = astype(%45, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 16, 30, 30)>
%47 = [[[[ 103   ... 7   33]]]]                                                                                        # ClearTensor<int8, shape=(32, 16, 2, 2)>                        @ /conv3/Conv.conv
%48 = conv2d(%46, %47, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 32, 29, 29)>                  @ /conv3/Conv.conv
%49 = round_bit_pattern(%48, lsbs_to_remove=15, overflow_protection=False, exactness=Exactness.EXACT)                  # EncryptedTensor<uint1, shape=(1, 32, 29, 29)>                  @ /conv3/Conv.conv_rounding
%50 = astype(%49, dtype=float64)                                                                                       # EncryptedTensor<float64, shape=(1, 32, 29, 29)>
%51 = 0                                                                                                                # ClearScalar<uint1>
%52 = add(%50, %51)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 29, 29)>
%53 = [[[[0]]  [ ... ]  [[0]]]]                                                                                        # ClearTensor<uint1, shape=(1, 32, 1, 1)>
%54 = subtract(%52, %53)                                                                                               # EncryptedTensor<float64, shape=(1, 32, 29, 29)>
%55 = 2.7391649284506662e-06                                                                                           # ClearScalar<float64>
%56 = multiply(%55, %54)                                                                                               # EncryptedTensor<float64, shape=(1, 32, 29, 29)>
%57 = [[[[ 0.005 ... 146467]]]]                                                                                        # ClearTensor<float32, shape=(1, 32, 1, 1)>
%58 = add(%56, %57)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 29, 29)>
%59 = 0                                                                                                                # ClearScalar<uint1>
%60 = maximum(%58, %59)                                                                                                # EncryptedTensor<float64, shape=(1, 32, 29, 29)>
%61 = 0.0014011075277061567                                                                                            # ClearScalar<float64>
%62 = divide(%60, %61)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 29, 29)>
%63 = 0                                                                                                                # ClearScalar<uint1>
%64 = add(%62, %63)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 29, 29)>
%65 = rint(%64)                                                                                                        # EncryptedTensor<float64, shape=(1, 32, 29, 29)>
%66 = 0                                                                                                                # ClearScalar<uint1>
%67 = 255                                                                                                              # ClearScalar<uint8>
%68 = clip(%65, %66, %67)                                                                                              # EncryptedTensor<float64, shape=(1, 32, 29, 29)>
%69 = astype(%68, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 32, 29, 29)>
%70 = reshape(%69, newshape=(1, 26912))                                                                                # EncryptedTensor<uint1, shape=(1, 26912)>
%71 = [[-13  10] ... [ 26 -34]]                                                                                        # ClearTensor<int8, shape=(26912, 2)>                            @ /fc1/Gemm.matmul
%72 = matmul(%70, %71)                                                                                                 # EncryptedTensor<uint15, shape=(1, 2)>                          @ /fc1/Gemm.matmul
return %72
