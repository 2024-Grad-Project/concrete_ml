 %0 = _x                                                                                                               # EncryptedTensor<int7, shape=(1, 3, 128, 128)>
 %1 = _y                                                                                                               # ClearTensor<uint1, shape=(1, 1)>
 %2 = ones()                                                                                                           # EncryptedTensor<uint1, shape=(1, 3, 130, 130)>
 %3 = -6                                                                                                               # ClearScalar<int4>
 %4 = multiply(%2, %3)                                                                                                 # EncryptedTensor<uint1, shape=(1, 3, 130, 130)>
 %5 = (%4[:, :, 1:129, 1:129] = %0)                                                                                    # EncryptedTensor<uint1, shape=(1, 3, 130, 130)>
 %6 = [[[[ 48  5 ... 56 -30]]]]                                                                                        # ClearTensor<int7, shape=(32, 3, 3, 3)>                           @ /conv1/Conv.conv
 %7 = conv2d(%5, %6, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<uint1, shape=(1, 32, 128, 128)>                  @ /conv1/Conv.conv
 %8 = round_bit_pattern(%7, lsbs_to_remove=10, overflow_protection=False, exactness=Exactness.APPROXIMATE)             # EncryptedTensor<uint1, shape=(1, 32, 128, 128)>                  @ /conv1/Conv.conv_rounding
 %9 = astype(%8, dtype=float64)                                                                                        # EncryptedTensor<float64, shape=(1, 32, 128, 128)>
%10 = 0                                                                                                                # ClearScalar<uint1>
%11 = add(%9, %10)                                                                                                     # EncryptedTensor<float64, shape=(1, 32, 128, 128)>
%12 = [[[[-1380] ... [  -72]]]]                                                                                        # ClearTensor<int13, shape=(1, 32, 1, 1)>
%13 = subtract(%11, %12)                                                                                               # EncryptedTensor<float64, shape=(1, 32, 128, 128)>
%14 = 0.00011188393128045629                                                                                           # ClearScalar<float64>
%15 = multiply(%14, %13)                                                                                               # EncryptedTensor<float64, shape=(1, 32, 128, 128)>
%16 = [[[[-0.090 ... 999463]]]]                                                                                        # ClearTensor<float32, shape=(1, 32, 1, 1)>
%17 = add(%15, %16)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 128, 128)>
%18 = 0                                                                                                                # ClearScalar<uint1>
%19 = maximum(%17, %18)                                                                                                # EncryptedTensor<float64, shape=(1, 32, 128, 128)>
%20 = 0.024546273320025364                                                                                             # ClearScalar<float64>
%21 = divide(%19, %20)                                                                                                 # EncryptedTensor<float64, shape=(1, 32, 128, 128)>
%22 = 0                                                                                                                # ClearScalar<uint1>
%23 = add(%21, %22)                                                                                                    # EncryptedTensor<float64, shape=(1, 32, 128, 128)>
%24 = rint(%23)                                                                                                        # EncryptedTensor<float64, shape=(1, 32, 128, 128)>
%25 = 0                                                                                                                # ClearScalar<uint1>
%26 = 127                                                                                                              # ClearScalar<uint7>
%27 = clip(%24, %25, %26)                                                                                              # EncryptedTensor<float64, shape=(1, 32, 128, 128)>
%28 = astype(%27, dtype=int_)                                                                                          # EncryptedTensor<uint1, shape=(1, 32, 128, 128)>
%29 = maxpool2d(%28, kernel_shape=(2, 2), strides=(2, 2), pads=(0, 0, 0, 0), dilations=(1, 1), ceil_mode=False)        # EncryptedTensor<uint1, shape=(1, 32, 64, 64)>
%30 = subgraph(%29)                                                                                                    # EncryptedTensor<uint1, shape=(1, 32, 64, 64)>
%31 = ones()                                                                                                           # EncryptedTensor<uint1, shape=(1, 32, 66, 66)>
%32 = 0                                                                                                                # ClearScalar<uint1>
%33 = multiply(%31, %32)                                                                                               # EncryptedTensor<uint1, shape=(1, 32, 66, 66)>
%34 = (%33[:, :, 1:65, 1:65] = %30)                                                                                    # EncryptedTensor<uint1, shape=(1, 32, 66, 66)>
%35 = [[[[-22 -2 ... 57  21]]]]                                                                                        # ClearTensor<int7, shape=(64, 32, 3, 3)>                          @ /conv2/Conv.conv
%36 = conv2d(%34, %35, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 64, 64, 64)>                    @ /conv2/Conv.conv
%37 = round_bit_pattern(%36, lsbs_to_remove=12, overflow_protection=False, exactness=Exactness.APPROXIMATE)            # EncryptedTensor<uint1, shape=(1, 64, 64, 64)>                    @ /conv2/Conv.conv_rounding
%38 = subgraph(%37)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64, 64, 64)>
%39 = maxpool2d(%38, kernel_shape=(2, 2), strides=(2, 2), pads=(0, 0, 0, 0), dilations=(1, 1), ceil_mode=False)        # EncryptedTensor<uint1, shape=(1, 64, 32, 32)>
%40 = subgraph(%39)                                                                                                    # EncryptedTensor<uint1, shape=(1, 64, 32, 32)>
%41 = ones()                                                                                                           # EncryptedTensor<uint1, shape=(1, 64, 34, 34)>
%42 = 0                                                                                                                # ClearScalar<uint1>
%43 = multiply(%41, %42)                                                                                               # EncryptedTensor<uint1, shape=(1, 64, 34, 34)>
%44 = (%43[:, :, 1:33, 1:33] = %40)                                                                                    # EncryptedTensor<uint1, shape=(1, 64, 34, 34)>
%45 = [[[[-48  4 ... 34 -45]]]]                                                                                        # ClearTensor<int7, shape=(128, 64, 3, 3)>                         @ /conv3/Conv.conv
%46 = conv2d(%44, %45, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<uint1, shape=(1, 128, 32, 32)>                   @ /conv3/Conv.conv
%47 = round_bit_pattern(%46, lsbs_to_remove=12, overflow_protection=False, exactness=Exactness.APPROXIMATE)            # EncryptedTensor<uint1, shape=(1, 128, 32, 32)>                   @ /conv3/Conv.conv_rounding
%48 = subgraph(%47)                                                                                                    # EncryptedTensor<uint1, shape=(1, 128, 32, 32)>
%49 = maxpool2d(%48, kernel_shape=(2, 2), strides=(2, 2), pads=(0, 0, 0, 0), dilations=(1, 1), ceil_mode=False)        # EncryptedTensor<uint1, shape=(1, 128, 16, 16)>
%50 = subgraph(%49)                                                                                                    # EncryptedTensor<uint1, shape=(1, 128, 16, 16)>
%51 = reshape(%50, newshape=[   -1 32768])                                                                             # EncryptedTensor<uint1, shape=(1, 32768)>
%52 = [[-14 -40  ...  -56  45]]                                                                                        # ClearTensor<int7, shape=(32768, 512)>                            @ /fc1/Gemm.matmul
%53 = matmul(%51, %52)                                                                                                 # EncryptedTensor<uint16, shape=(1, 512)>                          @ /fc1/Gemm.matmul
%54 = round_bit_pattern(%53, lsbs_to_remove=14, overflow_protection=False, exactness=Exactness.APPROXIMATE)            # EncryptedTensor<uint16, shape=(1, 512)>                          @ /fc1/Gemm.matmul_rounding
%55 = subgraph(%54)                                                                                                    # EncryptedTensor<uint1, shape=(1, 512)>
%56 = [[-40  43] ... [ -3 -34]]                                                                                        # ClearTensor<int7, shape=(512, 2)>                                @ /fc2/Gemm.matmul
%57 = matmul(%55, %56)                                                                                                 # EncryptedTensor<uint10, shape=(1, 2)>                            @ /fc2/Gemm.matmul
%58 = round_bit_pattern(%57, lsbs_to_remove=10, overflow_protection=False, exactness=Exactness.APPROXIMATE)            # EncryptedTensor<uint10, shape=(1, 2)>                            @ /fc2/Gemm.matmul_rounding
%59 = subgraph(%58)                                                                                                    # EncryptedTensor<uint1, shape=(1, 2)>
%60 = subgraph(%58)                                                                                                    # EncryptedTensor<uint1, shape=(1, 2)>
%61 = sum(%60, axis=(1,), keepdims=False)                                                                              # EncryptedTensor<uint2, shape=(1,)>                               @ /ReduceSum
%62 = 254                                                                                                              # ClearScalar<uint8>                                               @ /ReduceSum
%63 = subtract(%61, %62)                                                                                               # EncryptedTensor<uint1, shape=(1,)>                               @ /ReduceSum
%64 = round_bit_pattern(%63, lsbs_to_remove=2, overflow_protection=False, exactness=Exactness.APPROXIMATE)             # EncryptedTensor<uint1, shape=(1,)>                               @ /ReduceSum.rounding
%65 = subgraph(%64)                                                                                                    # EncryptedTensor<uint1, shape=(1,)>
%66 = sum(%59, axis=(1,), keepdims=False)                                                                              # EncryptedTensor<uint2, shape=(1,)>                               @ /ReduceSum_1
%67 = 234                                                                                                              # ClearScalar<uint8>                                               @ /ReduceSum_1
%68 = subtract(%66, %67)                                                                                               # EncryptedTensor<uint1, shape=(1,)>                               @ /ReduceSum_1
%69 = round_bit_pattern(%68, lsbs_to_remove=2, overflow_protection=False, exactness=Exactness.APPROXIMATE)             # EncryptedTensor<uint1, shape=(1,)>                               @ /ReduceSum_1.rounding
%70 = subgraph(%69)                                                                                                    # EncryptedTensor<uint1, shape=(1,)>
%71 = subgraph(%70)                                                                                                    # EncryptedTensor<uint1, shape=(1,)>
%72 = multiply(%65, %71)                                                                                               # EncryptedTensor<uint1, shape=(1,)>
%73 = 0                                                                                                                # ClearScalar<uint1>
%74 = subtract(%72, %73)                                                                                               # EncryptedTensor<uint1, shape=(1,)>
%75 = subgraph(%74)                                                                                                    # EncryptedTensor<uint1, shape=(1,)>
%76 = copy_function(%75)                                                                                               # EncryptedTensor<uint1, shape=(1,)>
%77 = copy_function(%1)                                                                                                # ClearTensor<uint1, shape=(1, 1)>
%78 = multiply(%76, %77)                                                                                               # EncryptedTensor<uint1, shape=(1, 1)>
return %78

Subgraphs:

    %30 = subgraph(%29):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 32, 64, 64)>
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 64, 64)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = subtract(%1, %2)                 # EncryptedTensor<float64, shape=(1, 32, 64, 64)>
         %4 = 0.024546273320025364             # ClearScalar<float64>
         %5 = multiply(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 64, 64)>
         %6 = 0.024546273320025364             # ClearScalar<float64>
         %7 = divide(%5, %6)                   # EncryptedTensor<float64, shape=(1, 32, 64, 64)>
         %8 = 0                                # ClearScalar<uint1>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 32, 64, 64)>
        %10 = rint(%9)                         # EncryptedTensor<float64, shape=(1, 32, 64, 64)>
        %11 = 0                                # ClearScalar<uint1>
        %12 = 127                              # ClearScalar<uint7>
        %13 = clip(%10, %11, %12)              # EncryptedTensor<float64, shape=(1, 32, 64, 64)>
        %14 = astype(%13, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64, 64)>
        return %14

    %38 = subgraph(%37):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 64, 64)>          @ /conv2/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 64, 64)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 64, 64)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 64, 64)>
         %6 = 2.2958676686364938e-05           # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 64, 64)>
         %8 = [[[[-0.036 ... 469942]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 64, 64)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 64, 64)>
        %12 = 0.013509732496007794             # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 64, 64)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 64, 64)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 64, 64)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 127                              # ClearScalar<uint7>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 64, 64)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 64, 64)>
        return %20

    %40 = subgraph(%39):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 32, 32)>
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 32, 32)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = subtract(%1, %2)                 # EncryptedTensor<float64, shape=(1, 64, 32, 32)>
         %4 = 0.013509732496007794             # ClearScalar<float64>
         %5 = multiply(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 32, 32)>
         %6 = 0.013509732496007794             # ClearScalar<float64>
         %7 = divide(%5, %6)                   # EncryptedTensor<float64, shape=(1, 64, 32, 32)>
         %8 = 0                                # ClearScalar<uint1>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 32, 32)>
        %10 = rint(%9)                         # EncryptedTensor<float64, shape=(1, 64, 32, 32)>
        %11 = 0                                # ClearScalar<uint1>
        %12 = 127                              # ClearScalar<uint7>
        %13 = clip(%10, %11, %12)              # EncryptedTensor<float64, shape=(1, 64, 32, 32)>
        %14 = astype(%13, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 32, 32)>
        return %14

    %48 = subgraph(%47):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 128, 32, 32)>          @ /conv3/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128, 32, 32)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 128, 32, 32)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 128, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128, 32, 32)>
         %6 = 8.93481281210174e-06             # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 128, 32, 32)>
         %8 = [[[[-0.026 ... 931889]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 128, 32, 32)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 128, 32, 32)>
        %12 = 0.00654744387564099              # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 128, 32, 32)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 128, 32, 32)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 128, 32, 32)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 127                              # ClearScalar<uint7>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 128, 32, 32)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128, 32, 32)>
        return %20

    %50 = subgraph(%49):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 128, 16, 16)>
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128, 16, 16)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = subtract(%1, %2)                 # EncryptedTensor<float64, shape=(1, 128, 16, 16)>
         %4 = 0.00654744387564099              # ClearScalar<float64>
         %5 = multiply(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128, 16, 16)>
         %6 = 0.00654744387564099              # ClearScalar<float64>
         %7 = divide(%5, %6)                   # EncryptedTensor<float64, shape=(1, 128, 16, 16)>
         %8 = 0                                # ClearScalar<uint1>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 128, 16, 16)>
        %10 = rint(%9)                         # EncryptedTensor<float64, shape=(1, 128, 16, 16)>
        %11 = 0                                # ClearScalar<uint1>
        %12 = 127                              # ClearScalar<uint7>
        %13 = clip(%10, %11, %12)              # EncryptedTensor<float64, shape=(1, 128, 16, 16)>
        %14 = astype(%13, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128, 16, 16)>
        return %14

    %55 = subgraph(%54):

         %0 = input                            # EncryptedTensor<uint16, shape=(1, 512)>         @ /fc1/Gemm.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 512)>        @ /fc1/Gemm.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 512)>
         %4 = [[0 0 0 0  ...  0 0 0 0]]        # ClearTensor<uint1, shape=(1, 512)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 512)>
         %6 = 5.741247376822193e-07            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 512)>
         %8 = [-8.705800 ... 87214e-03]        # ClearTensor<float32, shape=(512,)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 512)>
        %10 = 0                                # ClearScalar<uint1>
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 512)>
        %12 = 0.0016509656729981454            # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 512)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 512)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 512)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 127                              # ClearScalar<uint7>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 512)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 512)>
        return %20

    %59 = subgraph(%58):

         %0 = input                            # EncryptedTensor<uint10, shape=(1, 2)>         @ /fc2/Gemm.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 2)>        @ /fc2/Gemm.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 2)>
         %4 = [[0 0]]                          # ClearTensor<uint1, shape=(1, 2)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 2)>
         %6 = 1.154789190718178e-06            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 2)>
         %8 = [-0.02270069 -0.03209941]        # ClearTensor<float32, shape=(2,)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 2)>
        %10 = 10.0                             # ClearScalar<float32>
        %11 = multiply(%9, %10)                # EncryptedTensor<float64, shape=(1, 2)>
        %12 = 0.00556038943234016              # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 2)>
        %14 = 117                              # ClearScalar<uint7>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 2)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 2)>
        %17 = 0                                # ClearScalar<uint1>
        %18 = 127                              # ClearScalar<uint7>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 2)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 2)>
        return %20

    %60 = subgraph(%58):

         %0 = input                            # EncryptedTensor<uint10, shape=(1, 2)>         @ /fc2/Gemm.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 2)>        @ /fc2/Gemm.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 2)>
         %4 = [[0 0]]                          # ClearTensor<uint1, shape=(1, 2)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 2)>
         %6 = 1.154789190718178e-06            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 2)>
         %8 = [-0.02270069 -0.03209941]        # ClearTensor<float32, shape=(2,)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 2)>
        %10 = 10.0                             # ClearScalar<float32>
        %11 = multiply(%9, %10)                # EncryptedTensor<float64, shape=(1, 2)>
        %12 = [[0. 1.]]                        # ClearTensor<float32, shape=(1, 2)>
        %13 = multiply(%11, %12)               # EncryptedTensor<float64, shape=(1, 2)>
        %14 = 0.005122563492785817             # ClearScalar<float64>
        %15 = divide(%13, %14)                 # EncryptedTensor<float64, shape=(1, 2)>
        %16 = 127                              # ClearScalar<uint7>
        %17 = add(%15, %16)                    # EncryptedTensor<float64, shape=(1, 2)>
        %18 = rint(%17)                        # EncryptedTensor<float64, shape=(1, 2)>
        %19 = 0                                # ClearScalar<uint1>
        %20 = 127                              # ClearScalar<uint7>
        %21 = clip(%18, %19, %20)              # EncryptedTensor<float64, shape=(1, 2)>
        %22 = astype(%21, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 2)>
        return %22

    %65 = subgraph(%64):

         %0 = input                          # EncryptedTensor<uint1, shape=(1,)>          @ /ReduceSum.rounding
         %1 = 0.005122563492785817           # ClearScalar<float64>
         %2 = multiply(%1, %0)               # EncryptedTensor<float64, shape=(1,)>
         %3 = -0.6505655635837987            # ClearScalar<float64>
         %4 = divide(%2, %3)                 # EncryptedTensor<float64, shape=(1,)>
         %5 = 0                              # ClearScalar<uint1>
         %6 = add(%4, %5)                    # EncryptedTensor<float64, shape=(1,)>
         %7 = rint(%6)                       # EncryptedTensor<float64, shape=(1,)>
         %8 = 0                              # ClearScalar<uint1>
         %9 = 127                            # ClearScalar<uint7>
        %10 = clip(%7, %8, %9)               # EncryptedTensor<float64, shape=(1,)>
        %11 = astype(%10, dtype=int_)        # EncryptedTensor<uint1, shape=(1,)>
        return %11

    %70 = subgraph(%69):

         %0 = input                          # EncryptedTensor<uint1, shape=(1,)>          @ /ReduceSum_1.rounding
         %1 = 0.00556038943234016            # ClearScalar<float64>
         %2 = multiply(%1, %0)               # EncryptedTensor<float64, shape=(1,)>
         %3 = -0.5949616692603971            # ClearScalar<float64>
         %4 = divide(%2, %3)                 # EncryptedTensor<float64, shape=(1,)>
         %5 = 0                              # ClearScalar<uint1>
         %6 = add(%4, %5)                    # EncryptedTensor<float64, shape=(1,)>
         %7 = rint(%6)                       # EncryptedTensor<float64, shape=(1,)>
         %8 = 0                              # ClearScalar<uint1>
         %9 = 127                            # ClearScalar<uint7>
        %10 = clip(%7, %8, %9)               # EncryptedTensor<float64, shape=(1,)>
        %11 = astype(%10, dtype=int_)        # EncryptedTensor<uint1, shape=(1,)>
        return %11

    %71 = subgraph(%70):

         %0 = input                          # EncryptedTensor<uint1, shape=(1,)>
         %1 = 0.0                            # ClearScalar<float64>
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1,)>
         %3 = -0.5949616692603971            # ClearScalar<float64>
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1,)>
         %5 = 0                              # ClearScalar<uint1>
         %6 = equal(%4, %5)                  # EncryptedTensor<uint1, shape=(1,)>
         %7 = -0.5949616692603971            # ClearScalar<float64>
         %8 = %7 if %6 else %4               # EncryptedTensor<float64, shape=(1,)>
         %9 = 1.0                            # ClearScalar<float64>
        %10 = divide(%9, %8)                 # EncryptedTensor<float64, shape=(1,)>
        %11 = -1.6807805471621562            # ClearScalar<float64>
        %12 = divide(%10, %11)               # EncryptedTensor<float64, shape=(1,)>
        %13 = 0                              # ClearScalar<uint1>
        %14 = add(%12, %13)                  # EncryptedTensor<float64, shape=(1,)>
        %15 = rint(%14)                      # EncryptedTensor<float64, shape=(1,)>
        %16 = 0                              # ClearScalar<uint1>
        %17 = 127                            # ClearScalar<uint7>
        %18 = clip(%15, %16, %17)            # EncryptedTensor<float64, shape=(1,)>
        %19 = astype(%18, dtype=int_)        # EncryptedTensor<uint1, shape=(1,)>
        return %19

    %75 = subgraph(%74):

         %0 = input                          # EncryptedTensor<uint1, shape=(1,)>
         %1 = 1.0934579439252337             # ClearScalar<float64>
         %2 = multiply(%0, %1)               # EncryptedTensor<float64, shape=(1,)>
         %3 = rint(%2)                       # EncryptedTensor<float64, shape=(1,)>
         %4 = 1.0                            # ClearScalar<float64>
         %5 = add(%3, %4)                    # EncryptedTensor<float64, shape=(1,)>
         %6 = 2.0                            # ClearScalar<float64>
         %7 = divide(%5, %6)                 # EncryptedTensor<float64, shape=(1,)>
         %8 = 0                              # ClearScalar<uint1>
         %9 = add(%7, %8)                    # EncryptedTensor<float64, shape=(1,)>
        %10 = rint(%9)                       # EncryptedTensor<float64, shape=(1,)>
        %11 = 0                              # ClearScalar<uint1>
        %12 = 127                            # ClearScalar<uint7>
        %13 = clip(%10, %11, %12)            # EncryptedTensor<float64, shape=(1,)>
        %14 = astype(%13, dtype=int_)        # EncryptedTensor<uint1, shape=(1,)>
        return %14
